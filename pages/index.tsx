import Head from 'next/head';
import { Movie } from '../src/components/movie'
import { GetStaticProps } from 'next'
import { api } from '../src/services/api'

import { useEffect, useState } from 'react';
import { Gender } from '../src/components/categories/gender'
import { useFilter } from '../src/contexts/filter';

import { FilterModel } from '../src/components/filter';
import { AllCategories, AllMoviesStyle, Title, FiltersList, OptionsCategories } from '../src/components/styles/home'
import { Pagination } from '../src/components/pagination';

type MovieData = {
  id: string,
  name: string,
  title: string,
  vote_average: string,
  poster_path: string,
  genre_ids: number[]
}

type Genres = {
  id: number,
  name: string,
}

type HomeProps = {
  allMovies: MovieData[],
  genres: Genres[],
  slug: number
}

export default function Home({ allMovies, genres }: HomeProps) {
  const [ categories, setCategories ] = useState<boolean>(false)
  const [ filters, setFilters ] = useState<JSX.Element[]>([])
  const [ currentMovies, setCurrentMovies ] = useState<MovieData[]>([])
  const { currentFiltersData } = useFilter()

  useEffect(() => {
    const getAllMovies = () => {
      currentFiltersData === undefined ? setCurrentMovies(allMovies) : getFiltersProps()
    }

    console.log(currentFiltersData)
    getAllMovies()
  }, [])

  useEffect(() => {
    const getCurrentFilter = async () => {
      if (currentFiltersData.length > 0) {
        const categoriesFilters = await currentFiltersData.map((filter, index) => {
          return <FilterModel key={index} name={filter.name}/>
        })
        
        setFilters(categoriesFilters)
      } else setFilters([])
    }

    getFiltersProps()
    getCurrentFilter()
  }, [currentFiltersData])

  const getFiltersProps = async () => {        
    if (currentFiltersData.length > 0) {
      const categoriesFiltedIds = await currentFiltersData.map((filter) => {
        return `&with_genres=${filter.id}`
      });
  
      const categoriesFilters = await currentFiltersData.map((filter, index) => {
        return <FilterModel key={index} name={filter.name}/>
      });

      const ids = await categoriesFiltedIds.join("").toString()
      const { data } = await api.get(`movie/popular?api_key=c87d684e83e180236e81d0dae298e88c${ids}`)
      const movieListFilted = data.results
      
      setFilters(categoriesFilters)
      setCurrentMovies(movieListFilted) 
    } else setCurrentMovies(allMovies)
  }

  const toggleCaregoriesButtonStatus = () => {
    categories === true ? setCategories(false) : setCategories(true)
  }

  return (
    <div>
      <Head>
        <title>Movii</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&family=Roboto:wght@400;500&display=swap" rel="stylesheet"></link>
      </Head>

      <header>
        {filters.length > 0 ? (
          <section>
            <span style={{ marginLeft: "8px" }}>Showing movies at:</span>
            <FiltersList>
              {filters}
            </FiltersList>
          </section>
          ) : (
            <span style={{ marginLeft: "8px" }}>Showing all movies</span>
          )
        }

        <AllCategories>
          <OptionsCategories onClick={toggleCaregoriesButtonStatus}>
            Categories
          </OptionsCategories>
          {categories &&
            genres.map((gender, index) => {
              return <Gender key={index} id={gender.id} name={gender.name} />
            })
          }
        </AllCategories>
      </header>

      <main>
        <Title>Movii</Title>

        <section>
          <AllMoviesStyle>
            {currentMovies.map((movie, index) => {
              return <Movie key={index} id={movie.id} rate={movie.vote_average} image={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} />
            })}
          </AllMoviesStyle>
        </section>

        <section>
          <Pagination page_id={"1"}/>
        </section>
      </main>

      <footer>
        <span>Developed by Alex Nicolas</span>
      </footer>
    </div>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  const { data } = await api.get('movie/popular?api_key=c87d684e83e180236e81d0dae298e88c', {
    params: {
      _limit: 20,
      _sort: 'published_at',
      _order: 'desc'
    }
  })
  
  const genresData = await api.get('genre/movie/list?api_key=c87d684e83e180236e81d0dae298e88c');
  const genres = genresData.data.genres;
  
  const allMovies = data.results;

  return {
    props: {
        allMovies,
        genres
      },
    }
} 
